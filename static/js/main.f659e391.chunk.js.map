{"version":3,"sources":["images/kof-xiv.png","components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/navbar/navbar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","fighter","photo","alt","name","CardList","fighters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","Navbar","logo","App","e","setState","searchField","target","value","state","charlist","this","filteredFighters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,qC,4sGCG9BC,G,MAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAKF,EAAMG,QAAQC,MAAOC,IAAI,YACnC,4BAAKL,EAAMG,QAAQG,SCFVC,G,MAAW,SAAAP,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACzB,kBAAC,EAAD,CAAMO,IAAKP,EAAQQ,GAAIR,QAASA,UCJzBS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,yBAAKb,UAAU,eACb,2BACEA,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,Q,wBC2BDG,EAhCA,WACb,OACE,yBAAKhB,UAAU,UACb,yBAAKU,GAAG,cACN,2BAAOI,KAAK,aACZ,+BACA,+BACA,+BACA,wBAAIJ,GAAG,QACL,4BACE,yBAAKV,UAAU,QACb,yBAAKC,IAAKgB,IAAMb,IAAI,OAGxB,4BACE,uBAAGJ,UAAU,uBADf,UAGA,4BACE,uBAAGA,UAAU,uBADf,eAGA,4BACE,uBAAGA,UAAU,uBADf,cAGA,4BACE,uBAAGA,UAAU,uBADf,c,OCWKkB,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAUFL,aAAe,SAACM,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SATtC,EAAKC,MAAQ,CACXjB,SAAUkB,EACVJ,YAAa,IALH,E,qDAeJ,IAAD,EAC2BK,KAAKF,MAA/BjB,EADD,EACCA,SAAUc,EADX,EACWA,YACZM,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACvCA,EAAQG,KAAKwB,cAAcC,SAAST,EAAYQ,kBAGlD,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWY,YAAY,SAASC,aAAca,KAAKb,eACnD,kBAAC,EAAD,CAAUN,SAAUoB,S,GA1BVI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f659e391.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kof-xiv.e639e0fd.png\";","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img src={props.fighter.photo} alt=\"fighter\" />\n    <h2>{props.fighter.name}</h2>\n  </div>\n);\n","import React from 'react';\nimport { Card } from './card/card.component.jsx';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.fighters.map(fighter => (\n      <Card key={fighter.id} fighter={fighter} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <div className=\"main-search\">\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  </div>\n);\n","import React from 'react';\nimport './navbar.styles.css';\nimport logo from '../../images/kof-xiv.png';\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <div id=\"menuToggle\">\n        <input type=\"checkbox\" />\n        <span></span>\n        <span></span>\n        <span></span>\n        <ul id=\"menu\">\n          <li>\n            <div className=\"logo\">\n              <img src={logo} alt=\"\" />\n            </div>\n          </li>\n          <li>\n            <i className=\"fas fa-angle-right\"></i> Video\n          </li>\n          <li>\n            <i className=\"fas fa-angle-right\"></i> Characters\n          </li>\n          <li>\n            <i className=\"fas fa-angle-right\"></i> KOF's Art\n          </li>\n          <li>\n            <i className=\"fas fa-angle-right\"></i> About\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport Navbar from './components/navbar/navbar.component';\nimport charlist from './data/charlist';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      fighters: charlist,\n      searchField: '',\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { fighters, searchField } = this.state;\n    const filteredFighters = fighters.filter((fighter) =>\n      fighter.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <SearchBox placeholder=\"search\" handleChange={this.handleChange} />\n        <CardList fighters={filteredFighters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}